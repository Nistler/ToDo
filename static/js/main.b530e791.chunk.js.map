{"version":3,"sources":["Item.jsx","App.jsx","serviceWorker.js","index.js","chikaDance.gif"],"names":["Item","this","props","task","changeStatus","onRemove","isActive","className","type","onClick","id","text","Component","TodoBox","handleChange","e","value","target","setState","currentTask","addTask","preventDefault","state","tasks","length","newTasks","Math","random","toString","substr","chika","localStorage","setItem","JSON","stringify","handleRemove","filtered","filter","handleStatus","mapped","map","getItem","parse","activeTasks","el","key","finishedTasks","onSubmit","maxLength","required","placeholder","onChange","alt","src","chikaDance","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.b530e791.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Item extends Component {\n  render() {\n    const { task, changeStatus, onRemove, isActive } = this.props;\n    return (\n      <div className=\"sticker\">\n        <div className=\"sticker-content\">\n          <button\n            type=\"button\"\n            className=\"buttons\"\n            onClick={changeStatus(task.id)}\n          >\n            {isActive ? (\n              <i className=\"fas fa-check icons\"></i>\n            ) : (\n              <i className=\"fas fa-undo icons\"></i>\n            )}\n          </button>\n          <div className=\"taskText\">\n            {isActive ? task.text : <s>{task.text}</s>}\n          </div>\n          <button type=\"button\" className=\"buttons\" onClick={onRemove(task.id)}>\n            <i className=\"fas fa-times icons\"></i>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Item from \"./Item.jsx\";\nimport chikaDance from \"./chikaDance.gif\";\n\nconst generateID = () => Math.random().toString(36).substr(2, 9);\n\nexport default class TodoBox extends Component {\n  constructor(props) {\n    super(props);\n    const tasks = localStorage.getItem(\"tasks\")\n      ? JSON.parse(localStorage.getItem(\"tasks\"))\n      : [];\n    this.state = { tasks, currentTask: \"\", chika: false };\n  }\n\n  handleChange = (e) => {\n    const { value } = e.target;\n    this.setState({ currentTask: value });\n  };\n\n  addTask = (e) => {\n    e.preventDefault();\n    const { tasks, currentTask } = this.state;\n    if (currentTask.length === 0) {\n      return;\n    }\n    const newTasks = [\n      { id: generateID(), text: currentTask, isActive: true },\n      ...tasks,\n    ];\n    this.setState({\n      tasks: newTasks,\n      chika: currentTask === \"anime\",\n      currentTask: \"\",\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n  };\n\n  handleRemove = (id) => (e) => {\n    e.preventDefault();\n    const { tasks } = this.state;\n    const filtered = tasks.filter((task) => task.id !== id);\n    this.setState({ tasks: filtered });\n    localStorage.setItem(\"tasks\", JSON.stringify(filtered));\n  };\n\n  handleStatus = (id) => (e) => {\n    e.preventDefault();\n    const { tasks } = this.state;\n    const mapped = tasks.map((task) =>\n      task.id === id ? { ...task, isActive: !task.isActive } : task\n    );\n    this.setState({ tasks: mapped });\n    localStorage.setItem(\"tasks\", JSON.stringify(mapped));\n  };\n\n  render() {\n    const { tasks, currentTask, chika } = this.state;\n    const activeTasks = tasks\n      .filter((el) => el.isActive)\n      .map((el) => (\n        <Item\n          key={el.id}\n          task={el}\n          changeStatus={this.handleStatus}\n          onRemove={this.handleRemove}\n          isActive={el.isActive}\n        />\n      ));\n    const finishedTasks = tasks\n      .filter((el) => !el.isActive)\n      .map((el) => (\n        <Item\n          key={el.id}\n          task={el}\n          changeStatus={this.handleStatus}\n          onRemove={this.handleRemove}\n          isActive={el.isActive}\n        />\n      ));\n    return (\n      <>\n        <div className=\"container\">\n          <div className=\"inputSticker\">\n            <div className=\"sticker\">\n              <div className=\"sticker-content\">\n                <form className=\"form\" onSubmit={this.addTask}>\n                  <input\n                    type=\"text\"\n                    maxLength=\"30\"\n                    value={currentTask}\n                    required\n                    className=\"input\"\n                    placeholder=\"I am going...\"\n                    onChange={this.handleChange}\n                  />\n                  <button type=\"submit\" className=\"buttons\">\n                    <i className=\"fas fa-pencil-alt icons\"></i>\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n          <div className=\"tasksContainer\">\n            <div className=\"tasksBlock\">\n              <div className=\"text\">Active tasks: {activeTasks.length}</div>\n              {activeTasks}\n            </div>\n            <div className=\"tasksBlock\">\n              <div className=\"text\">Done: {finishedTasks.length}</div>\n              <div className=\"finished\">{finishedTasks}</div>\n            </div>\n          </div>\n        </div>\n        {chika && (\n          <img alt=\"Chika dancing\" src={chikaDance} className=\"chika\"></img>\n        )}\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoBox from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoBox />\n  </React.StrictMode>,\n  document.getElementById(\"tasksContent\")\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chikaDance.d585faa7.gif\";"],"sourceRoot":""}